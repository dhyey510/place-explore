{"ast":null,"code":"var _jsxFileName = \"D:\\\\Internships\\\\Augustcode Internship\\\\Demo\\\\Place-explorer\\\\frontend\\\\src\\\\user\\\\pages\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport \"./Auth.css\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ImageUplaod from \"../../shared/components/FormElements/ImageUpload\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formstate, inputHandler, setFormData] = useForm({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLogin) {\n      setFormData({ ...formstate.inputs,\n        name: undefined,\n        image: undefined\n      }, formstate.inputs.email.isValid && formstate.inputs.password.isValid);\n    } else {\n      setFormData({ ...formstate.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        },\n        image: {\n          value: null,\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLogin(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLogin) {\n      try {\n        const responseData = await sendRequest(\"http://localhost:5000/api/user/login\", \"POST\", JSON.stringify({\n          email: formstate.inputs.email.value,\n          password: formstate.inputs.password.value\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n        auth.login(responseData.user.id);\n      } catch (error) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"email\", formstate.inputs.email.value);\n        formData.append(\"name\", formstate.inputs.name.value);\n        formData.append(\"password\", formstate.inputs.password.value);\n        formData.append(\"image\", formstate.inputs.image.value);\n        const responseData = await sendRequest(\"http://localhost:5000/api/user/signup\", \"POST\", JSON.stringify({\n          name: formstate.inputs.name.value,\n          email: formstate.inputs.email.value,\n          password: formstate.inputs.password.value\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n        auth.login(responseData.user.id);\n      } catch (error) {}\n    } // console.log(formstate.inputs);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"authentication\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        asOverlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: authSubmitHandler,\n        children: [!isLogin && /*#__PURE__*/_jsxDEV(ImageUplaod, {\n          center: true,\n          id: \"image\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 24\n        }, this), !isLogin && /*#__PURE__*/_jsxDEV(Input, {\n          element: \"input\",\n          id: \"name\",\n          type: \"text\",\n          label: \"Name\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Please Enter Text\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          element: \"input\",\n          id: \"email\",\n          type: \"email\",\n          label: \"E-Mail\",\n          validators: [VALIDATOR_EMAIL()],\n          errorText: \"Please enter valid email address\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          element: \"input\",\n          id: \"password\",\n          type: \"password\",\n          label: \"Password\",\n          validators: [VALIDATOR_MINLENGTH(6)],\n          errorText: \"Please enter valid password (atleast 6 character)\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: !formstate.isValid,\n          children: isLogin ? \"LOGIN\" : \"SIGNUP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        inverse: true,\n        onClick: switchModeHandler,\n        children: [\"SWITCH TO \", isLogin ? \"SIGNUP\" : \"LOGIN\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"Pmj7FAI+WBTEL4NdguirJKwBw4M=\", false, function () {\n  return [useHttpClient, useForm];\n});\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["D:/Internships/Augustcode Internship/Demo/Place-explorer/frontend/src/user/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","ErrorModal","LoadingSpinner","Button","ImageUplaod","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","useHttpClient","AuthContext","Auth","auth","isLogin","setIsLogin","isLoading","error","sendRequest","clearError","formstate","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","image","prevMode","authSubmitHandler","event","preventDefault","responseData","JSON","stringify","login","user","id","formData","FormData","append"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\n\r\nimport \"./Auth.css\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ImageUplaod from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formstate, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLogin) {\r\n      setFormData(\r\n        {\r\n          ...formstate.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formstate.inputs.email.isValid && formstate.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formstate.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLogin((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLogin) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/user/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formstate.inputs.email.value,\r\n            password: formstate.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.user.id);\r\n      } catch (error) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formstate.inputs.email.value);\r\n        formData.append(\"name\", formstate.inputs.name.value);\r\n        formData.append(\"password\", formstate.inputs.password.value);\r\n        formData.append(\"image\", formstate.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/user/signup\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            name: formstate.inputs.name.value,\r\n            email: formstate.inputs.email.value,\r\n            password: formstate.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.user.id);\r\n      } catch (error) {}\r\n    }\r\n\r\n    // console.log(formstate.inputs);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLogin && <ImageUplaod center id=\"image\" onInput={inputHandler} />}\r\n          {!isLogin && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please Enter Text\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter valid email address\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter valid password (atleast 6 character)\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formstate.isValid}>\r\n            {isLogin ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLogin ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}