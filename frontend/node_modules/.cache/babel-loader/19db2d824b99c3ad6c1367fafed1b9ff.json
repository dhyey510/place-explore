{"ast":null,"code":"var _jsxFileName = \"D:\\\\Internships\\\\Augustcode Internship\\\\Demo\\\\Place-explorer\\\\frontend\\\\src\\\\places\\\\pages\\\\UpdatePlace.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport \"./NewPlace.css\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdatePlace = () => {\n  _s();\n\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const [formstate, inputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (error) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Couldn't find place! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n  const placeUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formstate.inputs);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"place-form\",\n      onSubmit: placeUpdateSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"title\",\n        element: \"input\",\n        type: \"text\",\n        label: \"Title\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid title\",\n        onInput: inputHandler,\n        initialValue: formstate.inputs.title.value,\n        initialValid: formstate.inputs.title.isValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"description\",\n        element: \"textarea\",\n        label: \"Description\",\n        validators: [VALIDATOR_MINLENGTH(5)],\n        errorText: \"Please enter a valid description (atleast 5 character)\",\n        onInput: inputHandler,\n        initialValue: formstate.inputs.description.value,\n        initialValid: formstate.inputs.description.isValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formstate.isValid,\n        children: \"Update Place\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdatePlace, \"M5H4yvCO6ZCV37hej3ufwJvNH3s=\", false, function () {\n  return [useHttpClient, useParams, useForm];\n});\n\n_c = UpdatePlace;\nexport default UpdatePlace;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePlace\");","map":{"version":3,"sources":["D:/Internships/Augustcode Internship/Demo/Place-explorer/frontend/src/places/pages/UpdatePlace.js"],"names":["React","useEffect","useState","useParams","Button","Input","Card","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","UpdatePlace","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","placeId","formstate","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","placeUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/util/validators\";\r\nimport \"./NewPlace.css\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UpdatePlace = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const placeId = useParams().placeId;\r\n\r\n  const [formstate, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `http://localhost:5000/api/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Couldn't find place! </h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const placeUpdateSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    console.log(formstate.inputs);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title\"\r\n          onInput={inputHandler}\r\n          initialValue={formstate.inputs.title.value}\r\n          initialValid={formstate.inputs.title.isValid}\r\n        />\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid description (atleast 5 character)\"\r\n          onInput={inputHandler}\r\n          initialValue={formstate.inputs.description.value}\r\n          initialValid={formstate.inputs.description.isValid}\r\n        />\r\n        <Button type=\"submit\" disabled={!formstate.isValid}>\r\n          Update Place\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"]},"metadata":{},"sourceType":"module"}